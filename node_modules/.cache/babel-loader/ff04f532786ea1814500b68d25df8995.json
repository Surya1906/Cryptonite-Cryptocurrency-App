{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst cryptoApiHeaders = {\n  'x-rapidapi-host': 'coinranking1.p.rapidapi.com',\n  'x-rapidapi-key': '82b41acf85msh5673b74cd202ce9p1d86b5jsne774e4d3b421'\n};\nconst baseUrl = 'https://coinranking1.p.rapidapi.com/stats';\n\nconst createRequest = url => ({\n  url,\n  headers: cryptoApiHeaders\n});\n\nexport const cryptoApi = createApi({\n  reducerPath: 'cryptoApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl\n  }),\n  endpoints: builder => ({\n    getCryptos: builder.query({\n      query: () => createRequest('/coins')\n    })\n  })\n});\nexport const {\n  useGetCryptosQuery\n} = cryptoApi;","map":{"version":3,"sources":["D:/cryptonite/src/services/cryptoApi.js"],"names":["createApi","fetchBaseQuery","cryptoApiHeaders","baseUrl","createRequest","url","headers","cryptoApi","reducerPath","baseQuery","endpoints","builder","getCryptos","query","useGetCryptosQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAEA,MAAMC,gBAAgB,GAAG;AACrB,qBAAmB,6BADE;AAErB,oBAAkB;AAFG,CAAzB;AAKA,MAAMC,OAAO,GAAG,2CAAhB;;AAGA,MAAMC,aAAa,GAAIC,GAAD,KAAU;AAAEA,EAAAA,GAAF;AAAOC,EAAAA,OAAO,EAAEJ;AAAhB,CAAV,CAAtB;;AAEA,OAAO,MAAMK,SAAS,GAAGP,SAAS,CAAC;AACjCQ,EAAAA,WAAW,EAAE,WADoB;AAEjCC,EAAAA,SAAS,EAAER,cAAc,CAAC;AAAEE,IAAAA;AAAF,GAAD,CAFQ;AAGjCO,EAAAA,SAAS,EAAGC,OAAD,KAAc;AACvBC,IAAAA,UAAU,EAAED,OAAO,CAACE,KAAR,CAAc;AACxBA,MAAAA,KAAK,EAAE,MAAMT,aAAa,CAAC,QAAD;AADF,KAAd;AADW,GAAd;AAHsB,CAAD,CAA3B;AAUP,OAAO,MAAM;AAAEU,EAAAA;AAAF,IAAwBP,SAA9B","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nconst cryptoApiHeaders = {\r\n    'x-rapidapi-host': 'coinranking1.p.rapidapi.com',\r\n    'x-rapidapi-key': '82b41acf85msh5673b74cd202ce9p1d86b5jsne774e4d3b421'\r\n};\r\n\r\nconst baseUrl = 'https://coinranking1.p.rapidapi.com/stats';\r\n\r\n\r\nconst createRequest = (url) => ({ url, headers: cryptoApiHeaders });\r\n\r\nexport const cryptoApi = createApi({\r\n  reducerPath: 'cryptoApi',\r\n  baseQuery: fetchBaseQuery({ baseUrl}),\r\n  endpoints: (builder) => ({\r\n    getCryptos: builder.query({\r\n      query: () => createRequest('/coins'),\r\n    })\r\n  }),\r\n});\r\n\r\nexport const { useGetCryptosQuery} = cryptoApi;"]},"metadata":{},"sourceType":"module"}